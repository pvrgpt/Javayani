A.	Write a Program To Generate The Adjacency Matrix

class Graph(object):
    # Initialize the matrix
    def __init__(self,size):
        self.adjMatrix = []
        for i in range(size):
            self.adjMatrix.append([0 for i in range(size)])
        self.size = size
    # Add Edges

    def add_edge(self,v1,v2):
        if v1==v2:
            print(v1,v2,"Same Vertex")
        # For Undirected Graph
        self.adjMatrix[v1][v2] = 1
        self.adjMatrix[v2][v1] = 1
    # Print the Matrix

    def print_matrix(self):
        for row in self.adjMatrix:
            print(row)

def main():
    g = Graph(5)
    g.add_edge(0,1)
    g.add_edge(0,2)
    g.add_edge(1,2)
    g.add_edge(2,0)
    g.add_edge(2,3)
    g.add_edge(4,4)
    g.print_matrix()
if __name__ == '__main__':
    main()


Asking User For Printing Directed or Undirected Graph
CODE:-


class Graph(object):
    # Initialize the matrix
    def __init__(self,size):
        self.adjMatrix = []
        for i in range(size):
            self.adjMatrix.append([0 for i in range(size)])
        self.size = size
    # Add Edges

    def add_edge(self,v1,v2,ch):
        if ch==1:
            if v1==v2:
                print(v1,v2,"Same Vertex")
            # For Undirected Graph
            self.adjMatrix[v1][v2] = 1
            self.adjMatrix[v2][v1] = 1
        elif ch==2:
            if v1==v2:
                print(v1,v2,"Same Vertex")
            # For Directed Graph
            self.adjMatrix[v1][v2] = 1
    # Print the Matrix

    def print_matrix(self):
        for row in self.adjMatrix:
            print(row)

ch = int(input("Enter 1 For UnDirected Graph\nEnter 2 For Directed Graph"))
def main():
    g = Graph(5)
    g.add_edge(0,1,ch)
    g.add_edge(0,2,ch)
    g.add_edge(1,2,ch)
    g.add_edge(2,0,ch)
    g.add_edge(2,3,ch)
    g.add_edge(4,4,ch)
    g.print_matrix()
if __name__ == '__main__':
    main()

# END


B.	Write a Program for Shortest Path Diagram
CODE:-


from queue import PriorityQueue
class Graph:

    def __init__(self, num_of_vertices):
        self.v = num_of_vertices
        self.edges = [[-1 for i in range(num_of_vertices)]for j in range(num_of_vertices)] 
        self.visited = []
    
    def add_edge(self, u ,v, weight):
        self.edges[u][v] = weight
        self.edges[v][u] = weight
    
    def dijkstra(self, start_vertex):
        D = {v:float('inf') for v in range(self.v)}
        D[start_vertex] = 0
        pq = PriorityQueue()
        pq.put((0, start_vertex))

        while not pq.empty():
            (dist, current_vertex) = pq.get()
            self.visited.append(current_vertex)
            for neighbor in range(self.v):
                if self.edges[current_vertex][neighbor] != -1:
                    distance = self.edges[current_vertex][neighbor]
                    if neighbor not in self.visited:
                        old_cost = D[neighbor]
                        new_cost = D[current_vertex] + distance
                        if new_cost < old_cost:
                            pq.put((new_cost, neighbor))
                            D[neighbor] = new_cost
        return D
g = Graph(9)
g.add_edge(0,1,4)
g.add_edge(0,6,7)
g.add_edge(1,6,11)
g.add_edge(1,7,20)
g.add_edge(1,2,9)
g.add_edge(2,3,6)
g.add_edge(2,4,2)
g.add_edge(3,4,10)
g.add_edge(3,5,5)
g.add_edge(4,5,15)
g.add_edge(4,7,1)
g.add_edge(4,8,5)
g.add_edge(5,8,12)
g.add_edge(6,7,1)
g.add_edge(7,8,3)

D = g.dijkstra(0)

for vertex in range(len(D)):
    print("Distance from vertex 0 to vertex", vertex,"is",D[vertex])
